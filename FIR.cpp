// /* ----------------------------------------------------------------------
//  * Copyright (C) 2010-2012 ARM Limited. All rights reserved.
//  *
//  * $Date:         17. January 2013
//  * $Revision:     V1.4.0
//  *
//  * Project:       CMSIS DSP Library
//  * Title:        arm_fir_example_f32.c
//  *
//  * Description:  Example code demonstrating how an FIR filter can be used
//  *               as a low pass filter.
//  *
//  * Target Processor: Cortex-M4/Cortex-M3
//  *
//  * Redistribution and use in source and binary forms, with or without
//  * modification, are permitted provided that the following conditions
//  * are met:
//  *   - Redistributions of source code must retain the above copyright
//  *     notice, this list of conditions and the following disclaimer.
//  *   - Redistributions in binary form must reproduce the above copyright
//  *     notice, this list of conditions and the following disclaimer in
//  *     the documentation and/or other materials provided with the
//  *     distribution.
//  *   - Neither the name of ARM LIMITED nor the names of its contributors
//  *     may be used to endorse or promote products derived from this
//  *     software without specific prior written permission.
//  *
//  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
//  * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
//  * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//  * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
//  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
//  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//  * POSSIBILITY OF SUCH DAMAGE.
//  * -------------------------------------------------------------------- */

// /**
//  * @ingroup groupExamples
//  */

// /**
//  * @defgroup FIRLPF FIR Lowpass Filter Example
//  *
//  * \par Description:
//  * \par
//  * Removes high frequency signal components from the input using an FIR lowpass
//  * filter. The example demonstrates how to configure an FIR filter and then pass
//  * data through it in a block-by-block fashion. \image html
//  * FIRLPF_signalflow.gif
//  *
//  * \par Algorithm:
//  * \par
//  * The input signal is a sum of two sine waves:  1 kHz and 15 kHz.
//  * This is processed by an FIR lowpass filter with cutoff frequency 6 kHz.
//  * The lowpass filter eliminates the 15 kHz signal leaving only the 1 kHz sine
//  * wave at the output. \par The lowpass filter was designed using MATLAB with a
//  * sample rate of 48 kHz and a length of 29 points. The MATLAB code to generate
//  * the filter coefficients is shown below: <pre> h = fir1(28, 6/24);
//  * </pre>
//  * The first argument is the "order" of the filter and is always one less than
//  * the desired length. The second argument is the normalized cutoff frequency.
//  * This is in the range 0 (DC) to 1.0 (Nyquist). A 6 kHz cutoff with a Nyquist
//  * frequency of 24 kHz lies at a normalized frequency of 6/24 = 0.25. The CMSIS
//  * FIR filter function requires the coefficients to be in time reversed order.
//  * <pre>
//  *     fliplr(h)
//  * </pre>
//  * The resulting filter coefficients and are shown below.
//  * Note that the filter is symmetric (a property of linear phase FIR filters)
//  * and the point of symmetry is sample 14.  Thus the filter will have a delay of
//  * 14 samples for all frequencies.
//  * \par
//  * \image html FIRLPF_coeffs.gif
//  * \par
//  * The frequency response of the filter is shown next.
//  * The passband gain of the filter is 1.0 and it reaches 0.5 at the cutoff
//  * frequency 6 kHz. \par \image html FIRLPF_response.gif \par The input signal
//  * is shown below. The left hand side shows the signal in the time domain while
//  * the right hand side is a frequency domain representation. The two sine wave
//  * components can be clearly seen. \par \image html FIRLPF_input.gif \par The
//  * output of the filter is shown below.  The 15 kHz component has been
//  * eliminated. \par \image html FIRLPF_output.gif
//  *
//  * \par Variables Description:
//  * \par
//  * \li \c testInput_f32_1kHz_15kHz points to the input data
//  * \li \c refOutput points to the reference output data
//  * \li \c testOutput points to the test output data
//  * \li \c firStateF32 points to state buffer
//  * \li \c firCoeffs32 points to coefficient buffer
//  * \li \c blockSize number of samples processed at a time
//  * \li \c numBlocks number of frames
//  *
//  * \par CMSIS DSP Software Library Functions Used:
//  * \par
//  * - arm_fir_init_f32()
//  * - arm_fir_f32()
//  *
//  * <b> Refer  </b>
//  * \link arm_fir_example_f32.c \endlink
//  *
//  */

// /** \example arm_fir_example_f32.c
//  */

// /* ----------------------------------------------------------------------
// ** Include Files
// ** ------------------------------------------------------------------- */

// #include "arm_math.h"
// #include "math_helper.h"
// #include "mbed.h"
// #include <cstdio>

// #define SEMIHOSTING
// #if defined(SEMIHOSTING)
// #include <stdio.h>
// #endif

// /* ----------------------------------------------------------------------
// ** Macro Defines
// ** ------------------------------------------------------------------- */

// // #define TEST_LENGTH_SAMPLES 320
// #define TEST_LENGTH_SAMPLES 1024
// /*

// This SNR is a bit small. Need to understand why
// this example is not giving better SNR ...

// */
// #define SNR_THRESHOLD_F32 75.0f
// #define BLOCK_SIZE 32


// #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
// /* Must be a multiple of 16 */
// #define NUM_TAPS_ARRAY_SIZE 32
// #else
// #define NUM_TAPS_ARRAY_SIZE 29
// #endif

// #define NUM_TAPS 29

// /* -------------------------------------------------------------------
//  * The input signal and reference output (computed with MATLAB)
//  * are defined externally in arm_fir_lpf_data.c.
//  * ------------------------------------------------------------------- */

// // extern float32_t testInput_f32_1kHz_15kHz[TEST_LENGTH_SAMPLES];
// static float32_t testInput_f32_1kHz_15kHz[TEST_LENGTH_SAMPLES] = { 894.20076, 1051.7552, 1051.7552, 996.342812, 999.820984, 999.820984, 989.654485, 989.654485, 1043.618704, 1039.698514, 1039.698514, 1025.129748, 1025.129748, 1117.407714, 1143.034995, 1143.034995, 1217.89121, 1217.89121, 1145.735572, 988.346599, 988.346599, 820.756358, 820.756358, 1049.550856, 1009.583082, 1042.047024, 1042.047024, 1060.77566, 1252.057906, 1252.057906, 1191.245567, 1191.245567, 1070.064017, 1214.359914, 1214.359914, 1184.518468, 1184.518468, 1080.744651, 797.260309, 797.260309, 868.268968, 868.268968, 1027.418123, 2092.268864, 2092.268864, 1934.018097, 1934.018097, 1748.623173, 1347.406769, 1347.406769, 1030.386821, 1030.386821, 837.268177, 1523.010506, 1783.504415, 1783.504415, 1866.797793, 1866.797793, 1427.253657, 1281.254854, 1281.254854, 1227.55285, 1227.55285, 994.033199, 1088.614716, 1088.614716, 1331.564869, 1331.564869, 1702.171848, 1734.087945, 1734.087945, 1736.502231, 1736.502231, 1244.859028, 1198.075123, 1198.075123, 1153.179084, 1153.179084, 918.773639, 858.580806, 858.580806, 756.717252, 629.648315, 453.06291, 483.76854, 626.176493, 626.176493, 637.36175, 637.36175, 1109.544952, 1228.674082, 1228.674082, 1345.761123, 1345.761123, 1799.457974, 1897.432476, 1897.432476, 1691.837463, 1691.837463, 1384.517606, 1418.519298, 1418.519298, 1441.152317, 1094.847935, 1094.847935, 1084.955299, 1084.955299, 1029.735888, 1300.911988, 1300.911988, 1221.524048, 1330.214268, 1330.214268, 1887.339397, 1627.461213, 1627.461213, 1440.528028, 1440.528028, 1203.537287, 1052.576838, 1052.576838, 886.644799, 886.644799, 432.965357, 351.071218, 351.071218, 203.366664, 203.366664, 173.127121, 508.257809, 508.257809, 601.938535, 601.938535, 695.95474, 1027.646826, 1027.646826, 1062.254678, 1062.254678, 1103.433732, 2103.895672, 2043.156871, 2043.156871, 1990.233655, 1990.233655, 1211.565516, 1129.187761, 1129.187761, 1143.386636, 1143.386636, 892.301519, 943.842148, 943.842148, 1098.623229, 1098.623229, 1870.095987, 2014.422994, 2014.422994, 2060.934254, 2060.934254, 1563.827676, 1342.116984, 1342.116984, 1153.549739, 1153.549739, 1038.133421, 1010.480084, 1010.480084, 886.420893, 775.43923, 176.229963, 176.229963, 376.461153, 376.461153, 552.758537, 565.627086, 565.627086, 633.499013, 633.499013, 744.592506, 1186.663811, 1186.663811, 1258.071938, 1258.071938, 1097.186402, 1557.937739, 1557.937739, 1713.752316, 1713.752316, 1579.548353, 1452.388378, 1452.388378, 1500.194987, 1500.194987, 1291.486353, 1425.214019, 1425.214019, 1139.596859, 714.258357, 714.258357, 2166.738332, 1806.243893, 1806.243893, 1720.09709, 1720.09709, 1652.37405, 1590.14339, 1590.14339, 1571.458558, 1571.458558, 1069.366635, 916.290893, 916.290893, 564.610485, 564.610485, 682.574538, 494.645327, 494.645327, 573.791774, 573.791774, 754.352703, 368.739746, 368.739746, 142.481578, 232.776717, 232.776717, 459.531283, 499.788955, 499.788955, 556.3569, 556.3569, 914.453389, 1070.209793, 1070.209793, 1189.353186, 1189.353186, 2140.944184, 1849.497499, 1849.497499, 1883.658674, 1883.658674, 1177.007222, 1069.037417, 1069.037417, 1139.945613, 1139.945613, 1453.6578, 1526.944007, 1526.944007, 1441.8717, 1441.8717, 1456.427478, 1619.254767, 1759.09238, 1759.09238, 1656.798419, 1382.621062, 1382.621062, 1118.214201, 1118.214201, 878.8373, 1030.407201, 1030.407201, 1028.362776, 1028.362776, 869.415896, 1599.234192, 1599.234192, 2120.144571, 2120.144571, 2056.728956, 1211.799076, 1211.799076, 1457.436448, 1457.436448, 1507.945954, 913.151685, 913.151685, 724.65785, 724.65785, 704.291133, 1838.345452, 1982.954362, 1982.954362, 2073.616647, 2073.616647, 1839.765474, 1731.0699, 1731.0699, 1657.750584, 1657.750584, 1129.876542, 1198.978732, 1198.978732, 1231.536439, 1231.536439, 516.309984, 378.272389, 378.272389, 340.826936, 340.826936, 542.864624, 525.133316, 525.133316, 505.782562, 505.782562, 565.873661, 1624.698434, 1624.698434, 1500.853424, 1456.898075, 1456.898075, 1157.623859, 992.283226, 992.283226, 1165.104716, 1165.104716, 1028.424523, 1078.069107, 1078.069107, 1098.002277, 1098.002277, 1037.781287, 1110.261681, 1110.261681, 1196.652832, 1196.652832, 1285.760086, 1383.367269, 1383.367269, 1541.537868, 1820.380455, 1820.380455, 1612.944202, 1612.944202, 1432.472687, 1063.808723, 1063.808723, 1026.868054, 981.72705, 981.72705, 1174.557363, 1117.725369, 1117.725369, 1038.585095, 1038.585095, 1206.158779, 1342.118847, 1342.118847, 1603.799551, 1603.799551, 1459.959931, 1079.491084, 1079.491084, 835.280791, 835.280791, 1332.574201, 1178.409946, 1178.409946, 1132.347561, 1132.347561, 938.06503, 666.201921, 666.201921, 574.9313, 574.9313, 1014.125239, 990.681079, 1055.78549, 1055.78549, 1178.748913, 1178.748913, 1518.745864, 1465.943382, 1465.943382, 1322.170186, 1322.170186, 1563.469539, 1664.342813, 1664.342813, 1701.566925, 1027.094446, 1027.094446, 1167.391537, 1167.391537, 1241.119253, 1005.738037, 1005.738037, 1004.932336, 1004.932336, 968.237058, 947.292457, 947.292457, 1009.272015, 1009.272015, 1005.61076, 1059.991038, 1016.599233, 1016.599233, 1124.964888, 1124.964888, 1389.061914, 1376.084663, 1376.084663, 1394.143823, 1394.143823, 1404.2895, 1239.338533, 1239.338533, 1149.345031, 1149.345031, 1319.17929, 1301.854831, 1301.854831, 1398.448068, 1398.448068, 1614.884516, 1750.32597, 1750.32597, 1910.585774, 1910.585774, 1353.458533, 1271.005114, 1271.005114, 1265.990521, 1282.055381, 857.155178, 857.155178, 724.332106, 724.332106, 708.834254, 399.270585, 399.270585, 339.141563, 339.141563, 314.178293, 314.178293, 273.038459, 276.436249, 276.436249, 429.058271, 429.058271, 931.055852, 958.347014, 958.347014, 965.287004, 965.287004, 1335.967065, 1361.05033, 1361.05033, 1368.012427, 1499.324181, 1416.619215, 1304.809948, 1173.44365, 1173.44365, 1126.269506, 1176.918434, 1176.918434, 1219.664298, 1219.664298, 1255.569194, 1640.367642, 1640.367642, 1746.466433, 1746.466433, 1862.655094, 1512.685361, 1512.685361, 1362.655129, 1362.655129, 1214.590466, 928.567176, 928.567176, 953.684958, 953.684958, 1044.455839, 1042.343513, 1042.343513, 988.60002, 988.60002, 1076.345669, 1545.294147, 1566.253172, 1566.253172, 1510.39763, 1510.39763, 1310.117934, 1399.881781, 1399.881781, 1380.333293, 1380.333293, 1095.869518, 1000.766706, 1000.766706, 904.894469, 904.894469, 611.039279, 780.058331, 780.058331, 849.104234, 849.104234, 1456.069023, 1626.847258, 1626.847258, 1891.176353, 1891.176353, 2065.124451, 1975.451594, 1975.451594, 1825.960843, 1750.623318, 1350.529526, 1350.529526, 1157.311972, 1157.311972, 1045.60987, 554.098367, 554.098367, 474.299483, 474.299483, 411.400049, 411.400049, 398.55489, 397.206495, 397.206495, 551.089829, 551.089829, 1011.835955, 959.532178, 959.532178, 867.9591, 867.9591, 1339.716388, 1387.850857, 1387.850857, 1436.126039, 1411.167247, 1313.660915, 1156.745434, 1148.518176, 1148.518176, 1166.407733, 1187.977273, 1187.977273, 1349.679962, 1349.679962, 1333.998501, 1384.154254, 1384.154254, 1432.901253, 1432.901253, 1467.372141, 1107.269615, 1107.269615, 1158.490397, 1158.490397, 1311.186867, 1467.154048, 1467.154048, 1451.037215, 1451.037215, 1422.163844, 1650.475386, 1650.475386, 1617.861861, 1517.160835, 1517.160835, 1073.980447, 1014.71326, 1014.71326, 974.124222, 974.124222, 589.109497, 564.942475, 564.942475, 548.906185, 548.906185, 438.758476, 513.118895, 513.118895, 537.461627, 537.461627, 927.882536, 848.295939, 848.295939, 881.55204, 881.55204, 1038.33954, 1786.164046, 1786.164046, 1901.309549, 1901.309549, 1781.193701, 1250.347552, 1015.395982, 1015.395982, 1190.71911, 1529.759458, 1529.759458, 1539.798688, 1539.798688, 1423.733472, 1253.191925, 1253.191925, 1349.234598, 1349.234598, 1307.517878, 525.407461, 525.407461, 666.577827, 666.577827, 969.793277, 969.793277, 1357.327153, 1209.065755, 1209.065755, 996.145572, 996.145572, 917.406126, 878.319987, 878.319987, 892.965285, 997.814612, 1585.848984, 1597.662355, 1596.109645, 1596.109645, 1565.692818, 1690.846238, 1690.846238, 1531.719948, 1531.719948, 1353.5483, 1026.371278, 1026.371278, 1060.906216, 1060.906216, 1033.095349, 1200.505727, 1200.505727, 1270.988985, 1270.988985, 1455.996223, 1712.702543, 1712.702543, 1768.488903, 1768.488903, 1791.314043, 1185.666901, 1185.666901, 975.847324, 802.71726, 802.71726, 454.391901, 440.600726, 440.600726, 529.556418, 529.556418, 1186.639372, 1309.631246, 1309.631246, 1507.229578, 1507.229578, 1753.871432, 1760.741321, 1760.741321, 1685.830656, 1685.830656, 1375.423571, 1312.831292, 1312.831292, 1196.875098, 1196.875098, 1334.54599, 1978.813028, 1978.813028, 2113.358701, 2113.358701, 2295.642394, 1773.336404, 1095.672396, 1095.672396, 691.647309, 2858.799398, 2858.799398, 2859.72691, 2859.72691, 2586.128187, 1731.954099, 1731.954099, 2195.322528, 2195.322528, 2206.784992, 771.063551, 771.063551, 486.700113, 486.700113, 830.136133, 2500.150995, 2500.150995, 2564.518473, 2564.518473, 2447.82577, 1264.560793, 1264.560793, 1170.546881, 1170.546881, 1218.420289, 1922.138393, 2036.026768, 2036.026768, 1999.866996, 1999.866996, 1211.001652, 1082.069776, 1082.069776, 1031.04898, 1031.04898, 1022.420657, 975.545488, 975.545488, 1002.562218, 1002.562218, 1638.551189, 1677.315116, 1677.315116, 1637.1408, 1637.1408, 1879.605012, 2107.714165, 2107.714165, 2123.207479, 2123.207479, 1631.700034, 1648.149265, 1648.149265, 1600.957214, 1552.568517, 2168.510549, 2168.510549, 2039.495281, 2039.495281, 1197.641432, 938.546216, 938.546216, 643.436089, 643.436089, 415.360085, 1306.490719, 1306.490719, 1594.451943, 1594.451943, 2006.843043, 2004.144206, 2004.144206, 1736.69341, 1736.69341, 1486.448452, 792.97604, 792.97604, 939.056974, 939.056974, 1050.80255, 1419.293838, 1419.293838, 1690.66762, 2241.007809, 2241.007809, 2048.388147, 1672.525635, 1672.525635, 1415.497792, 1415.497792, 625.570939, 701.457055, 701.457055, 1328.982317, 1328.982317, 2563.940132, 2384.344564, 2384.344564, 2174.464072, 2174.464072, 1128.664255, 1116.825859, 1116.825859, 1186.882892, 
// 1186.882892, 1165.35574, 1625.208294, 1625.208294, 2160.645505, 2348.046848, 2072.914374, 1636.489536, 1309.933204, 1309.933204, 1006.360273, 1061.753738, 1061.753738, 1258.396202, 1258.396202, 1666.698233, 1702.298152, 1702.298152, 1727.838245, 1727.838245, 1946.731106, 1905.997377, 1905.997377, 1849.432616, 1849.432616, 1783.563568, 1629.881284, 1629.881284, 1318.260217, 1318.260217, 877.451423, 1234.324107, 1234.324107, 1235.447287, 1101.303319, 2309.594986, 2167.819642, 1749.577663, 1749.577663, 1267.16613, 489.944895, 489.944895, 720.297855, 720.297855, 840.010119, 1964.236493, 1964.236493, 2449.221917, 2449.221917, 2702.015174, 2255.558689, 2255.558689, 2241.432355, 2241.432355, 1860.185743, 1263.329332, 1263.329332, 1916.668203, 1916.668203, 2540.985242, 1791.357586, 1791.357586, 2051.218175, 2008.11653, 2008.11653, 1460.839142, 820.943969, 820.943969, 483.203891, 483.203891, 1057.369377, 304.965572, 304.965572, 1667.982614, 1667.982614, 2283.167975, 2054.944038, 2054.944038, 1245.073492, 1245.073492, 2472.693673, 1650.458118, 1650.458118, 1242.731669, 1242.731669, 2117.23924, 2084.237031, 2084.237031, 2064.54983, 2064.54983, 967.40891, 1102.871706, 1599.201676, 1753.690965, 2229.62979, 2566.578462, 2566.578462, 2629.762917, 2629.762917, 2211.369937, 1896.323021, 1896.323021, 1478.382224, 1478.382224, 1081.519302, 1784.312473, 1784.312473, 1008.530614, 1008.530614, 1352.003698, 2071.464458, 2071.464458, 2029.81009, 2029.81009, 2037.584845, 1912.434574, 1912.434574, 1499.993667, 1499.993667, 1556.808916, 1136.934915, 1136.934915, 1838.992659, 2393.637191, 2393.637191, 2025.298003, 2027.090033, 2027.090033, 2068.377142, 2068.377142, 1507.301562, 920.637822, 920.637822, 1015.331473, 1015.331473, 615.086173, 1265.928908, 1265.928908, 1920.219258, 1920.219258, 1648.751649, 1564.175182, 1564.175182, 1562.52008, 1562.52008, 2118.366588, 1983.42658, 1983.42658, 1868.039079, 1631.39756, 948.197237, 620.511885, 526.416185, 526.416185, 728.164817, 645.071314, 645.071314, 790.520714, 790.520714, 987.099792, 1273.846537, 1273.846537, 1247.191244, 1247.191244, 1259.912695, 1266.863844, 1266.863844, 1169.935041, 1169.935041, 1157.422136, 1104.160767, 1104.160767, 984.14125, 984.14125, 1221.124072, 1630.212563, 1630.212563, 1252.595306, 1175.84948, 1175.84948, 1196.088207, 1351.338596, 1351.338596, 1491.27127, 1491.27127, 1458.813216, 1291.072422, 1291.072422, 1170.530649, 1170.530649, 1284.312657, 1302.32638, 1302.32638, 1286.526331, 1286.526331, 1158.77953, 1047.754265, 1047.754265, 1032.470339, 1032.470339, 1004.18574, 1039.920189, 1039.920189, 1084.780162, 1084.780162, 1532.923351, 1512.04861, 1395.538964, 1395.538964, 1423.059029, 2007.782359, 2007.782359, 1897.346832, 1897.346832, 1669.822446, 1488.6158, 1488.6158, 1485.065992, 1485.065992, 1332.591835, 1426.383188, 1426.383188, 1445.343904, 1445.343904, 1215.938321, 1401.77352, 1401.77352, 1681.959869, 1681.959869, 2104.318655, 1817.584661, 1817.584661, 1460.678609, 1460.678609, 1370.846454, 1326.398884, 1383.223048};
// extern float32_t refOutput[TEST_LENGTH_SAMPLES];

// /* -------------------------------------------------------------------
//  * Declare Test output buffer
//  * ------------------------------------------------------------------- */

// static float32_t testOutput[TEST_LENGTH_SAMPLES];

// /* -------------------------------------------------------------------
//  * Declare State buffer of size (numTaps + blockSize - 1)
//  * ------------------------------------------------------------------- */
// #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
// static float32_t firStateF32[2 * BLOCK_SIZE + NUM_TAPS - 1];
// #else
// static float32_t firStateF32[BLOCK_SIZE + NUM_TAPS - 1];
// #endif

// /* ----------------------------------------------------------------------
// ** FIR Coefficients buffer generated using fir1() MATLAB function.
// ** fir1(28, 6/24)
// ** ------------------------------------------------------------------- */
// #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
// const float32_t firCoeffs32[NUM_TAPS_ARRAY_SIZE] = {
//     -0.0018225230f, -0.0015879294f, +0.0000000000f, +0.0036977508f,
//     +0.0080754303f, +0.0085302217f, -0.0000000000f, -0.0173976984f,
//     -0.0341458607f, -0.0333591565f, +0.0000000000f, +0.0676308395f,
//     +0.1522061835f, +0.2229246956f, +0.2504960933f, +0.2229246956f,
//     +0.1522061835f, +0.0676308395f, +0.0000000000f, -0.0333591565f,
//     -0.0341458607f, -0.0173976984f, -0.0000000000f, +0.0085302217f,
//     +0.0080754303f, +0.0036977508f, +0.0000000000f, -0.0015879294f,
//     -0.0018225230f, 0.0f,           0.0f,           0.0f};
// #else
// const float32_t firCoeffs32[NUM_TAPS_ARRAY_SIZE] = {
//     0.0017268610, 0.0018100137, 0.0019541514, 0.0016099524, -0.0000000000, -0.0037139471, -0.0102172773, -0.0198309022, -0.0323535858, -0.0470011073, -0.0624652810, -0.0770895396, -0.0891310480, -0.0970585002, 0.8984242990, -0.0970585002, -0.0891310480, -0.0770895396, -0.0624652810, -0.0470011073, -0.0323535858, -0.0198309022, -0.0102172773, -0.0037139471, -0.0000000000, 0.0016099524, 0.0019541514, 0.0018100137, 0.0017268610 };
// #endif

// /* ------------------------------------------------------------------
//  * Global variables for FIR LPF Example
//  * ------------------------------------------------------------------- */

// uint32_t blockSize = BLOCK_SIZE;
// uint32_t numBlocks = TEST_LENGTH_SAMPLES / BLOCK_SIZE;

// float32_t snr;

// /* ----------------------------------------------------------------------
//  * FIR LPF Example
//  * ------------------------------------------------------------------- */

// int32_t main(void) {
//   uint32_t i;
//   arm_fir_instance_f32 S;
//   arm_status status;
//   float32_t *inputF32, *outputF32;

//   /* Initialize input and output buffer pointers */
//   inputF32 = &testInput_f32_1kHz_15kHz[0];
//   outputF32 = &testOutput[0];

//   /* Call FIR init function to initialize the instance structure. */
//   arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0],
//                    blockSize);

//   /* ----------------------------------------------------------------------
//   ** Call the FIR process function for every blockSize samples
//   ** ------------------------------------------------------------------- */

//   for (i = 0; i < numBlocks; i++) {
//     arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize),
//                 blockSize);
//   }

//   /* ----------------------------------------------------------------------
//   ** Compare the generated output against the reference output computed
//   ** in MATLAB.
//   ** ------------------------------------------------------------------- */

//   for (i = 0; i < TEST_LENGTH_SAMPLES; i++) {
//     printf("%f, ", testOutput[i]);
//   }

//   snr = arm_snr_f32(&refOutput[0], &testOutput[0], TEST_LENGTH_SAMPLES);

//   status = (snr < SNR_THRESHOLD_F32) ? ARM_MATH_TEST_FAILURE : ARM_MATH_SUCCESS;

//   if (status != ARM_MATH_SUCCESS) {
// #if defined(SEMIHOSTING)
//     printf("FAILURE\n");
// #else
//     while (1)
//       ; /* main function does not return */
// #endif
//   } else {
// #if defined(SEMIHOSTING)
//     printf("SUCCESS\n");
// #else
//     while (1)
//       ; /* main function does not return */
// #endif
//   }
// }

// /** \endlink */